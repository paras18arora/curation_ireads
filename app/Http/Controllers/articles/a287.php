<link rel='stylesheet' href='digital_ocean.css'><br> <br> 
      <h3 id="introduction">Introduction</h3>

<p>If you are planning on using CoreOS in your infrastructure, the first thing you will want to set up is a CoreOS cluster. In order for CoreOS machines to form a cluster, their <code>etcd2</code> instances must be connected. In this tutorial, we will give step-by-step instructions to quickly create a 3-node CoreOS cluster on IndiaReads.</p>

<h2 id="prerequisites">Prerequisites</h2>

<p>If you are unfamiliar with the components that CoreOS is built on (docker, etcd2, and fleet) it is highly recommended that you read <a href="https://indiareads/community/tutorials/an-introduction-to-coreos-system-components">An Introduction to CoreOS System Components</a>. You will want to pay particular attention to the section that covers <code>etcd2</code>, since that component is essential to the cluster discovery process.</p>

<h3 id="ssh-keys">SSH Keys</h3>

<p>Every CoreOS server that you create will need to have at least one SSH public key installed during its creation process. The key(s) will be installed to the <code>core</code> user's authorized keys file, and you will need the corresponding private key(s) to log in to your CoreOS server.</p>

<p>If you do not already have any SSH keys associated with your IndiaReads account, do so now by following steps 1-3 of this tutorial: <a href="https://indiareads/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets">How To Use SSH Keys with IndiaReads Droplets</a>. Then you will want to add your private key to your SSH agent on your client machine by running the following command:</p>
<pre class="code-pre "><code langs="">ssh-add
</code></pre>
<p>For more about this step, see <a href="https://indiareads/community/tutorials/how-to-connect-to-your-Droplet-with-ssh#ssh-login-as-root">this article</a>.</p>

<h3 id="digitalocean-personal-access-token">IndiaReads Personal Access Token</h3>

<p>If you are planning on using the IndiaReads API to create your CoreOS machines, refer to <a href="https://indiareads/community/tutorials/how-to-use-the-digitalocean-api-v2#how-to-generate-a-personal-access-token">this tutorial</a> for information on how to generate and use a Personal Access Token with write permissions.</p>

<p>Now that you have the prerequisites out of the way, let's start building our CoreOS cluster!</p>

<h2 id="generate-a-new-discovery-url">Generate a New Discovery URL</h2>

<p>The first step to setting up a new CoreOS cluster is generating a new discovery URL, a unique address that stores peer CoreOS addresses and metadata. The easiest way to do this is to use <code>https://discovery.etcd.io</code>, a free discovery service. A new discovery URL can be generated by visiting <a href="https://discovery.etcd.io/new">https://discovery.etcd.io/new</a> in a web browser or by running the following <code>curl</code> command:</p>
<pre class="code-pre "><code langs="">curl -w "\n" "https://discovery.etcd.io/new?size=3"
</code></pre>
<p>Either method will return a fresh, unique discovery URL that looks something like the following (the highlighted part will be a unique token):</p>
<pre class="code-pre "><code langs="">https://discovery.etcd.io/<span class="highlight">5c1574906b3502aa9d8dc43c1b185775</span>
</code></pre>
<p>You will use your resulting discovery URL to create your new CoreOS cluster. The same discovery URL must be specified in the <code>etcd2</code> section of the cloud-config of each server that you want to add to a particular CoreOS cluster.</p>

<p>Now that we have a discovery URL, let's look at how to create <code>cloud-config</code> file that uses it.</p>

<h2 id="write-a-cloud-config-file">Write a Cloud-Config File</h2>

<p>CoreOS uses a file called <code>cloud-config</code> which allows you to declaratively customize network configuration, systemd units, and other OS-level items. This file is written in YAML format, which uses indentation to denote data hierarchy. The <code>cloud-config</code> file is processed when a machine is booted, and provides a way to configure your machines with <code>etcd2</code> settings that will allow them to discover the cluster that they should join.</p>

<p>We will cover how to write a minimal <code>cloud-config</code> to get a working CoreOS cluster up and running. For a full list of items that can be configured with cloud-config, check out the <a href="https://coreos.com/docs/cluster-management/setup/cloudinit-cloud-config/">official documentation</a>. They also provide a helpful tool that can check your cloud-config file's syntax, <a href="https://coreos.com/validate/">Cloud-Config Validator</a>.</p>

<h3 id="minimal-cloud-config">Minimal Cloud-Config</h3>

<p>As mentioned earlier, the peer addresses of each CoreOS machine in a cluster is stored with the discovery URL. Therefore, each machine in a cluster must use the same discovery URL and pass in its own IP address where its <code>etcd2</code> service can be reached. These are specified in <code>cloud-config</code> under the <code>etcd2</code> section, and are shown in the code block below.</p>

<p>You will also need to specify a <code>units</code> section, which will start the <code>etcd2</code> and <code>fleet</code> services that are necessary for a working CoreOS cluster.</p>

<p>Here is a basic <code>cloud-config</code> file that can be used with your CoreOS machines to make a new cluster (substitute the value of <code>discovery</code> with the discovery URL that you generated earlier):</p>
<pre class="code-pre "><code langs="">#cloud-config

coreos:
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new:
    discovery: https://discovery.etcd.io/<discovery_token>
    # multi-region deployments, multi-cloud deployments, and Droplets without
    # private networking need to use $public_ipv4:
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on the official ports 2379, 2380 and one legacy port 4001:
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380
  fleet:
    public-ip: $private_ipv4   # used for fleetctl ssh command
  units:
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
</code></pre>
<p><span class="note"><strong>Note:</strong> The <code>#cloud-config</code> line is <em>required</em>. The <code>$private_ipv4</code> and <code>$public_ipv4</code> substitution variables are fully supported in cloud-config on IndiaReads--these variables will be replaced with the actual respective IP addresses of your new VPS. Also, the <code>fleet</code> section is not required if you do not intend to use the <code>fleetctl ssh</code> command.<br /></span></p>

<p>This <code>cloud-config</code> script can be used to set up a basic CoreOS that can be used for testing purposes; unfortunately, it is not very secure. For a more serious setup, you should set up a secure CoreOS cluster by following this tutorial: <a href="https://indiareads/community/tutorials/how-to-secure-your-coreos-cluster-with-tls-ssl-and-firewall-rules">How To Secure Your CoreOS Cluster with TLS/SSL and Firewall Rules</a>.</p>

<h2 id="create-coreos-cluster">Create CoreOS Cluster</h2>

<p>Now that you know what your <code>cloud-config</code> file for each machine in your new CoreOS cluster will consist of, let's create your CoreOS cluster. Because Droplets can be created through the IndiaReads Control Panel or API, we will show you how to create your CoreOS cluster using both methods.</p>

<h3 id="digitalocean-control-panel">IndiaReads Control Panel</h3>

<p>First, visit the <a href="https://cloud.digitalocean.com/">IndiaReads Control Panel</a> then click the <strong>Create Droplet</strong> button.</p>

<p>Next, select CoreOS as your Linux distribution, then select which channel you want to use (Stable, Beta, or Alpha).</p>

<p>Then select your desired Droplet size. A smaller size is fine if you're doing basic testing.</p>

<p>Next, select your preferred datacenter region.</p>

<p>Under the <strong>Select additional options</strong> header, select <strong>Private Networking</strong> and <strong>User Data</strong>. Copy and paste your <code>cloud-config</code> script into the User Data text field. It should look something like this:</p>

<p><img src="https://assets.digitalocean.com/site/ControlPanel/cp-userdata.png" alt="User-data" /></p>

<p>Next, select at least one SSH key that you want to use to log in to your Droplets.</p>

<p>Under the <strong>Finalize and create</strong> section, create <strong><em>at least three</em></strong> Droplets and specify their hostnames. In our example, we'll call them <strong>coreos-01</strong>, <strong>coreos-02</strong>, and <strong>coreos-03</strong>:</p>

<p><img src="https://assets.digitalocean.com/site/ControlPanel/cp-coreos-multi-create.png" alt="Create 3 Droplets" /></p>

<p>Lastly, click the <strong>Create</strong> button to create the Droplets that will form your CoreOS cluster.</p>

<p>To learn more about the Droplet creation process, using the IndiaReads Control Panel, refer to <a href="https://indiareads/community/tutorials/how-to-create-your-first-digitalocean-droplet-virtual-server">this guide</a>.</p>

<h3 id="digitalocean-api">IndiaReads API</h3>

<p>If you use the IndiaReads API to create your CoreOS Droplets, you can specify your <code>cloud-config</code> via the <code>user_data</code> parameter in your Droplet creation POST request--just paste the whole script in there.</p>

<p>Let us assume that we want to create three 1 GB Droplets named <strong>coreos-01</strong>, <strong>coreos-02</strong>, and <strong>coreos-03</strong> with private networking, in the NYC3 data center, using the CoreOS Stable channel image, and the <code>cloud-config</code> file shown earlier. Here is an example of the <code>curl</code> command you would run to create it using the IndiaReads API:</p>
<pre class="code-pre "><code langs="">curl -X POST "https://api.digitalocean.com/v2/droplets" \
      -d'{"names":["coreos-01","coreos-02","coreos-03"],"region":"nyc3","size":"1GB","private_networking":true,"image":"coreos-stable","user_data":
"#cloud-config

coreos:
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new:
    discovery: https://discovery.etcd.io/<discovery_token>
    # multi-region deployments, multi-cloud deployments, and Droplets without
    # private networking need to use $public_ipv4:
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on the official ports 2379, 2380 and one legacy port 4001:
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380
  fleet:
    public-ip: $private_ipv4   # used for fleetctl ssh command
  units:
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start",
      "ssh_keys":[ <span class="highlight"><SSH Key ID(s)></span> ]}' \
      -H "Authorization: Bearer $TOKEN" \
      -H "Content-Type: application/json"
</code></pre>
<p><span class="note"><strong>Note:</strong> This is just like a normal multi-Droplet create request, with the addition of the example <code>cloud-config</code> passed through the <code>user_data</code> parameter.<br /></span></p>

<p>You must substitute your SSH Key ID(s) or fingerprint(s) for <code><SSH Key ID(s)></code>, and make sure <code>$TOKEN</code> is set to one of your read/write IndiaReads Personal Access Tokens. </p>

<p>After running this command with the appropriate substitutions, your 3-node CoreOS cluster will be created.</p>

<p>For more information about using the API, please refer to <a href="https://indiareads/community/tutorials/how-to-use-the-digitalocean-api-v2">this tutorial</a>.</p>

<h2 id="verify-cluster">Verify Cluster</h2>

<p>To verify that our 3-machine cluster has formed properly, we must SSH to one of the cluster members.</p>

<p>Log into the <strong>coreos-01</strong> machine as the <code>core</code> user via SSH, and use the <code>-A</code> option to forward your SSH agent. Remember to substitute the public IP address:</p>
<pre class="code-pre "><code langs="">ssh -A core@<span class="highlight">coreos-01_public_IP</span>
</code></pre>
<p>At the command prompt, enter this <code>fleetctl</code> command to show all the members of the cluster:</p>
<pre class="code-pre "><code langs="">fleetctl list-machines
</code></pre>
<p>You should see a list of all of the online machines in the cluster, identifiable by their respective <code>peer-addr</code> IP addresses. Here is an example of the output:</p>
<pre class="code-pre "><code langs="">MACHINE     IP      METADATA
59b2fffd... 10.131.29.141   -
853b0df3... 10.131.63.121   -
cd64a2e3... 10.131.63.120   -
</code></pre>
<p>If you see all of the machines that you created, all of them are aware of each other via <code>etcd2</code>, and your cluster has formed properly!</p>

<p><span class="warning"><strong>Warning:</strong> Be sure to set up IPTables to restrict access to port 4001 to machines within your CoreOS cluster, after the cluster is set up. This will prevent external, unauthorized  users from controlling your CoreOS machines. For production use, you should strongly consider following the steps in <a href="https://indiareads/community/tutorials/how-to-configure-tls-ssl-and-firewall-rules-to-secure-your-coreos-cluster-on-digitalocean">this guide to securing a CoreOS cluster with TLS/SSL certificates and firewall rules</a>.<br /></span></p>

<h2 id="adding-new-machines">Adding New Machines</h2>

<p>If you would like to add new machines to an existing CoreOS cluster, simply create a new Droplet using the same <code>cloud-config</code> (and discovery URL). Your new CoreOS machine will automatically join the existing cluster.</p>

<p>If you forgot which discovery URL you used, you may look it up on one of the members of the cluster. Use the following <code>grep</code> command on one of your existing machines:</p>
<pre class="code-pre "><code langs="">grep DISCOVERY /run/systemd/system/etcd2.service.d/20-cloudinit.conf
</code></pre>
<p>You will see a line the contains the original discovery URL, like the following:</p>
<pre class="code-pre "><code langs="">Environment="ETCD_DISCOVERY=<span class="highlight">https://discovery.etcd.io/575302f03f4fb2db82e81ea2abca55e9</span>"
</code></pre>
<h2 id="conclusion">Conclusion</h2>

<p>Your basic CoreOS cluster is set up, and now you can move on to testing with it! If you are looking to set up a secure CoreOS cluster, follow this tutorial: <a href="https://indiareads/community/tutorials/how-to-secure-your-coreos-cluster-with-tls-ssl-and-firewall-rules">How To Secure Your CoreOS Cluster with TLS/SSL and Firewall Rules</a>.</p>

<p>The rest of the tutorials in this series will show you more about CoreOS, and how to use docker containers and service discovery with your CoreOS cluster.</p>

    